{"map":"{\"version\":3,\"file\":\"CancelToken.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/cancel/CancelToken.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,MAAM,MAAM,UAAU,CAAA;AAM7B;IAII,qBAAY,QAAwB;QAApC,iBAmBC;QAlBG,IAAI,cAA8B,CAAA;QAClC,sBAAsB;QACtB,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAS,UAAA,OAAO;YACtC,cAAc,GAAG,OAAO,CAAA;QAC5B,CAAC,CAAC,CAAA;QACF,GAAG;QACH,4BAA4B;QAE5B,QAAQ,CAAC,UAAA,OAAO;YACZ,SAAS;YACT,IAAI,KAAI,CAAC,MAAM,EAAE;gBACb,OAAM;aACT;YACD,kCAAkC;YAClC,KAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAA;YACjC,2BAA2B;YAC3B,cAAc,CAAC,KAAI,CAAC,MAAM,CAAC,CAAA;QAC/B,CAAC,CAAC,CAAA;IACN,CAAC;IAED,sCAAgB,GAAhB;QACI,2BAA2B;QAC3B,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,IAAI,CAAC,MAAM,CAAA;SACpB;IACL,CAAC;IAEM,kBAAM,GAAb;QACI,IAAI,MAAiB,CAAA;QACrB,IAAM,KAAK,GAAG,IAAI,WAAW,CAAC,UAAA,CAAC;YAC3B,qBAAqB;YACrB,MAAM,GAAG,CAAC,CAAA;QACd,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,OAAO;YACH,MAAM,QAAA;YACN,KAAK,OAAA;SACR,CAAA;IACL,CAAC;IACL,kBAAC;AAAD,CAAC,AA5CD,IA4CC\"}","code":"import Cancel from './Cancel';\r\nvar CancelToken = /** @class */ (function () {\r\n    function CancelToken(executor) {\r\n        var _this = this;\r\n        var resolvePromise;\r\n        // 在pengding状态的promise\r\n        this.promise = new Promise(function (resolve) {\r\n            resolvePromise = resolve;\r\n        });\r\n        // \r\n        // console.log(this.promise)\r\n        executor(function (message) {\r\n            // 防止多次调用\r\n            if (_this.reason) {\r\n                return;\r\n            }\r\n            // 通过 new Cancel 判断是否是 cancel 类型错误\r\n            _this.reason = new Cancel(message);\r\n            // console.log(this.reason)\r\n            resolvePromise(_this.reason);\r\n        });\r\n    }\r\n    CancelToken.prototype.throwIfRequested = function () {\r\n        // console.log(this.reason)\r\n        if (this.reason) {\r\n            throw this.reason;\r\n        }\r\n    };\r\n    CancelToken.source = function () {\r\n        var cancel;\r\n        var token = new CancelToken(function (c) {\r\n            // c 是 executor 中执行函数\r\n            cancel = c;\r\n        });\r\n        console.log(token);\r\n        return {\r\n            cancel: cancel,\r\n            token: token\r\n        };\r\n    };\r\n    return CancelToken;\r\n}());\r\nexport default CancelToken;\r\n//# sourceMappingURL=CancelToken.js.map","dts":{"name":"/Users/wudan/Desktop/学习/慕课网/TS  从入门到重构axios /我的文件/ts-axios/dist/types/cancel/CancelToken.d.ts","writeByteOrderMark":false,"text":"import { CancelExecutor, CancelTokenSource } from '../types';\r\nimport Cancel from './Cancel';\r\nexport default class CancelToken {\r\n    promise: Promise<Cancel>;\r\n    reason?: Cancel;\r\n    constructor(executor: CancelExecutor);\r\n    throwIfRequested(): void;\r\n    static source(): CancelTokenSource;\r\n}\r\n"}}
