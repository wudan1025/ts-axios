{"map":"{\"version\":3,\"file\":\"header.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/helpers/header.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,SAAS,CAAA;AAIlD,gBAAgB;AAChB,SAAS,mBAAmB,CAAC,OAAY,EAAE,cAAsB;IAC/D,IAAI,CAAC,OAAO,EAAE;QACZ,OAAM;KACP;IACD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QAC/B,IACE,IAAI,KAAK,cAAc;YACvB,IAAI,CAAC,iBAAiB,EAAE,KAAK,cAAc,CAAC,iBAAiB,EAAE,EAC/D;YACA,OAAO,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;YACvC,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA;SACrB;IACH,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,WAAW;AACX,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,IAAS;IACpD,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAA;IAC5C,sCAAsC;IACtC,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;QACvB,IAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACvC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC,CAAA;SAC3D;KACF;IACD,OAAO,OAAO,CAAA;AAChB,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,OAAe;IAC1C,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAChC,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,MAAM,CAAA;KACd;IAED,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QAC5B,IAAA,oBAA4B,EAA3B,WAAG,EAAE,WAAsB,CAAA;QAChC,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAA;QAC9B,IAAI,CAAC,GAAG,EAAE;YACR,OAAM;SACP;QACD,IAAI,GAAG,EAAE;YACP,GAAG,GAAG,GAAG,CAAC,IAAI,EAAE,CAAA;SACjB;QACD,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;IACnB,CAAC,CAAC,CAAA;IACF,OAAO,MAAM,CAAA;AACf,CAAC;AAED,mBAAmB;AACnB,MAAM,UAAU,cAAc,CAAC,OAAY,EAAE,MAAc;IACzD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,OAAO,CAAA;KACf;IAED,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAA;IAEzE,IAAM,eAAe,GAAG;QACtB,QAAQ;QACR,KAAK;QACL,MAAM;QACN,SAAS;QACT,MAAM;QACN,KAAK;QACL,OAAO;QACP,QAAQ;KACT,CAAA;IAED,eAAe,CAAC,OAAO,CAAC,UAAA,MAAM;QAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,OAAO,OAAO,CAAA;AAChB,CAAC\"}","code":"import { isPlainObject, deepMerge } from './utils';\r\n// 替换 header 大小写\r\nfunction normalizeHeaderName(headers, normalizedName) {\r\n    if (!headers) {\r\n        return;\r\n    }\r\n    Object.keys(headers).forEach(function (name) {\r\n        if (name !== normalizedName &&\r\n            name.toLocaleUpperCase() === normalizedName.toLocaleUpperCase()) {\r\n            headers[normalizedName] = headers[name];\r\n            delete headers[name];\r\n        }\r\n    });\r\n}\r\n// 处理header\r\nexport function processHeaders(headers, data) {\r\n    normalizeHeaderName(headers, 'Content-Type');\r\n    // 对纯对象{}类型数据 默认加上 header:content-type\r\n    if (isPlainObject(data)) {\r\n        if (headers && !headers['Content-Type']) {\r\n            headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        }\r\n    }\r\n    return headers;\r\n}\r\nexport function parseHeaders(headers) {\r\n    var parsed = Object.create(null);\r\n    if (!headers) {\r\n        return parsed;\r\n    }\r\n    headers.split('\\r\\n').forEach(function (line) {\r\n        var _a = line.split(':'), key = _a[0], val = _a[1];\r\n        key = key.trim().toLowerCase();\r\n        if (!key) {\r\n            return;\r\n        }\r\n        if (val) {\r\n            val = val.trim();\r\n        }\r\n        parsed[key] = val;\r\n    });\r\n    return parsed;\r\n}\r\n// 处理不同请求情况下header值\r\nexport function flattenHeaders(headers, method) {\r\n    if (!headers) {\r\n        return headers;\r\n    }\r\n    headers = deepMerge(headers.common || {}, headers[method] || {}, headers);\r\n    var methodsToDelete = [\r\n        'delete',\r\n        'get',\r\n        'head',\r\n        'options',\r\n        'post',\r\n        'put',\r\n        'patch',\r\n        'common'\r\n    ];\r\n    methodsToDelete.forEach(function (method) {\r\n        delete headers[method];\r\n    });\r\n    return headers;\r\n}\r\n//# sourceMappingURL=header.js.map","dts":{"name":"/Users/wudan/Desktop/学习/慕课网/TS  从入门到重构axios /我的文件/ts-axios/dist/types/helpers/header.d.ts","writeByteOrderMark":false,"text":"import { Method } from '../types/index';\r\nexport declare function processHeaders(headers: any, data: any): any;\r\nexport declare function parseHeaders(headers: string): any;\r\nexport declare function flattenHeaders(headers: any, method: Method): any;\r\n"}}
